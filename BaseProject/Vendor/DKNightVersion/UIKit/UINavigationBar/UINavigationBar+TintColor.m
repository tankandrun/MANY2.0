//
//  UINavigationBar+TintColor.m
//  UINavigationBar+TintColor
//
//  Copyright (c) 2015 Draveness. All rights reserved.
//
//  These files are generated by ruby script, if you want to modify code
//  in this file, you are supposed to update the ruby code, run it and
//  test it. And finally open a pull request.

#import "UINavigationBar+TintColor.h"
#import "DKNightVersionManager.h"
#import "objc/runtime.h"

@interface UINavigationBar ()

@property (nonatomic, strong) UIColor *normalTintColor;
@property (nonatomic, strong) UIColor *normalBarTintColor;

@end

@implementation UINavigationBar (TintColor)

+ (void)load {
    static dispatch_once_t onceToken;                                              
    dispatch_once(&onceToken, ^{                                                   
        Class class = [self class];                                                
        SEL originalSelector = @selector(setTintColor:);                                  
        SEL swizzledSelector = @selector(hook_setTintColor:);                                 
        Method originalMethod = class_getInstanceMethod(class, originalSelector);  
        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);  
        BOOL didAddMethod =                                                        
        class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));                   
        if (didAddMethod){
            class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));           
        } else {                                                                   
            method_exchangeImplementations(originalMethod, swizzledMethod);        
        }
        {
            SEL originalSelector = @selector(setBarTintColor:);
            SEL swizzledSelector = @selector(hook_setBarTintColor:);
            Method originalMethod = class_getInstanceMethod(class, originalSelector);
            Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);
            BOOL didAddMethod =
            class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));
            if (didAddMethod){
                class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));
            } else {
                method_exchangeImplementations(originalMethod, swizzledMethod);
            }
        }
        {
            SEL originalSelector = @selector(awakeFromNib);
            SEL swizzledSelector = @selector(hook_awakeFromNib);
            Method originalMethod = class_getInstanceMethod(class, originalSelector);
            Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);
            BOOL didAddMethod =
            class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));
            if (didAddMethod){
                class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));
            } else {
                method_exchangeImplementations(originalMethod, swizzledMethod);
            }
        }
    });
    [DKNightVersionManager addClassToSet:self.class];
}

- (void)hook_awakeFromNib
{
    self.normalTintColor = self.tintColor;
    self.normalBarTintColor = self.barTintColor;
    [self hook_awakeFromNib];
}

- (void)hook_setTintColor:(UIColor*)tintColor {
    if ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) [self setNormalTintColor:tintColor];
    [self hook_setTintColor:tintColor];
}

- (void)hook_setBarTintColor:(UIColor*)barTintColor {
    if ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNormal) [self setNormalBarTintColor:barTintColor];
    [self hook_setBarTintColor:barTintColor];
}

- (UIColor *)nightBarTintColor {
    UIColor *nightColor = objc_getAssociatedObject(self, @selector(nightBarTintColor));
    if (nightColor) {
        return nightColor;
    } else {
        UIColor *resultColor = [self.nightJoin boolValue] ? navBarTintColor : (self.normalBarTintColor ? : self.barTintColor);
        return resultColor;
    }
}

- (void)setNightBarTintColor:(UIColor *)nightBarTintColor {
    if ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNight) [self setBarTintColor:nightBarTintColor];
    objc_setAssociatedObject(self, @selector(nightBarTintColor), nightBarTintColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (UIColor *)normalBarTintColor {
    return objc_getAssociatedObject(self, @selector(normalBarTintColor));
}

- (void)setNormalBarTintColor:(UIColor *)normalBarTintColor {
    objc_setAssociatedObject(self, @selector(normalBarTintColor), normalBarTintColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (UIColor *)nightTintColor {
    UIColor *nightColor = objc_getAssociatedObject(self, @selector(nightTintColor));
    if (nightColor) {
        return nightColor;
    } else {
        UIColor *resultColor = [self.nightJoin boolValue] ? navTintColor : (self.normalTintColor ? :self.tintColor);
        return resultColor;
    }
}

- (void)setNightTintColor:(UIColor *)nightTintColor {
    if ([DKNightVersionManager currentThemeVersion] == DKThemeVersionNight) [self setTintColor:nightTintColor];
    objc_setAssociatedObject(self, @selector(nightTintColor), nightTintColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

- (UIColor *)normalTintColor {
    return objc_getAssociatedObject(self, @selector(normalTintColor));
}

- (void)setNormalTintColor:(UIColor *)normalTintColor {
    objc_setAssociatedObject(self, @selector(normalTintColor), normalTintColor, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}

@end
